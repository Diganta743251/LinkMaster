package fe.linksheet.composable.page.settings.linkmaster

import android.content.Intent
import android.graphics.Bitmap
import android.provider.MediaStore
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import fe.linksheet.R
import fe.linksheet.composable.component.page.SaneScaffoldSettingsPage
// Analytics import removed - violates Play Store policies
import fe.linksheet.feature.qr.QRCodeGenerator

@Composable
fun LinkMasterSettingsRoute(
    onBackPressed: () -> Unit
) {
    SaneScaffoldSettingsPage(
        headline = stringResource(R.string.linkmaster_settings),
        onBackPressed = onBackPressed
    ) {
        item {
            LinkMasterSettingsContent()
        }
    }
}

@Composable
private fun LinkMasterSettingsContent() {
    val context = LocalContext.current
    var qrCodeBitmap by remember { mutableStateOf<Bitmap?>(null) }
    var qrInputText by remember { mutableStateOf("https://linkmaster.app") }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
            .verticalScroll(rememberScrollState()),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        // QR Code Generator Section
        Card(
            modifier = Modifier.fillMaxWidth(),
            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Icon(Icons.Default.QrCode, contentDescription = null)
                    Text(
                        text = stringResource(R.string.qr_code_generator),
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold
                    )
                }
                
                OutlinedTextField(
                    value = qrInputText,
                    onValueChange = { qrInputText = it },
                    label = { Text(stringResource(R.string.enter_url_or_text)) },
                    modifier = Modifier.fillMaxWidth()
                )
                
                Row(
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Button(
                        onClick = {
                            qrCodeBitmap = QRCodeGenerator.generateBrandedQRCode(qrInputText)
                        },
                        modifier = Modifier.weight(1f)
                    ) {
                        Text(stringResource(R.string.generate_qr))
                    }
                    
                    Button(
                        onClick = {
                            qrCodeBitmap = QRCodeGenerator.generateNeonQRCode(qrInputText)
                        },
                        modifier = Modifier.weight(1f)
                    ) {
                        Text(stringResource(R.string.neon_qr))
                    }
                }
                
                qrCodeBitmap?.let { bitmap ->
                    Image(
                        bitmap = bitmap.asImageBitmap(),
                        contentDescription = stringResource(R.string.generated_qr_code),
                        modifier = Modifier
                            .size(200.dp)
                            .align(Alignment.CenterHorizontally)
                    )
                    
                    Button(
                        onClick = {
                            // Save QR code to gallery
                            MediaStore.Images.Media.insertImage(
                                context.contentResolver,
                                bitmap,
                                "LinkMaster QR Code",
                                "Generated by LinkMaster"
                            )
                        },
                        modifier = Modifier.align(Alignment.CenterHorizontally)
                    ) {
                        Icon(Icons.Default.Save, contentDescription = null)
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(stringResource(R.string.save_to_gallery))
                    }
                }
            }
        }

        // Privacy & Compliance Section
        Card(
            modifier = Modifier.fillMaxWidth(),
            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Icon(Icons.Default.Security, contentDescription = null)
                    Text(
                        text = stringResource(R.string.privacy),
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold
                    )
                }
                
                Text(
                    text = stringResource(R.string.play_store_compliant_description),
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
                
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Icon(
                        Icons.Default.CheckCircle,
                        contentDescription = null,
                        tint = MaterialTheme.colorScheme.primary
                    )
                    Text(
                        text = stringResource(R.string.play_store_compliant),
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Medium
                    )
                }
            }
        }

        // Widget Section
        Card(
            modifier = Modifier.fillMaxWidth(),
            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    Icon(Icons.Default.Widgets, contentDescription = null)
                    Text(
                        text = stringResource(R.string.home_widget),
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold
                    )
                }
                
                Text(
                    text = stringResource(R.string.widget_description),
                    style = MaterialTheme.typography.bodyMedium
                )
                
                Button(
                    onClick = {
                        // Open widget picker
                        val intent = Intent("android.appwidget.action.APPWIDGET_PICK")
                        context.startActivity(intent)
                    },
                    modifier = Modifier.align(Alignment.CenterHorizontally)
                ) {
                    Icon(Icons.Default.Add, contentDescription = null)
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(stringResource(R.string.add_widget))
                }
            }
        }
    }
}

// AnalyticsItem function removed - analytics violates Play Store policies